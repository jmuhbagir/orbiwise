var config = require("./config");
var http = require("http");
var log = require("log"); log.setLevel("info");

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 */
function Client(dto) {
  
  this.username = dto.username ? dto.username :  config.username;
  this.password = dto.password ? dto.password : config.password;
}

/**
 * Invoke a given API. If response status is 401, the method will try to obtain a new access token using the 
 * current user's refresh token and retry the invocation of the target API.
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.url : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
Client.prototype.callApi = function(params) {
  
  try {   
     return this._callApi(params);
  }catch(response) {
      this._handleError(response);
  }
};

Client.prototype._callApi = function(params) {
   
  if (params.params && (params.method == "POST" || params.method == "PUT")) {
   
    params.bodyString = typeof(params.params) == "string" ? params.params : JSON.stringify(params.params);
    delete params.params;
  }
  
  params.url = params.url.indexOf("http") > -1 ? params.url : config.apiUrl + "/" +  config.apiVer + params.url;
  
  params.headers = {
    "Authorization": "Basic " + btoa(this.username + ":" + this.password)
  };
  
  log.info("Sending the following request: " + JSON.stringify(params));
  var response = http.request(params);
  //log.info("Received following response: " + JSON.stringify(response));
  if (response.status >= "200" && response.status < "300") {
    
    var responseBody = "";
    if (response.body) {
      
      try { 
        responseBody = JSON.parse(response.body ?  response.body : {});
      }catch(exception) {
        responseBody = response.body;
      } 
    }    
    
    if (responseBody.message) {
      throw response;
    }else {
      return responseBody;
    }
  }else {
    throw response;
  }
};

Client.prototype._refreshToken = function() {
 
};
  
Client.prototype._handleError = function(response) {
   
  var errorObj = "";
  try {
    
    errorObj = JSON.parse(response.body);
  }catch(e) {
    
    try {
      errorObj = JSON.parse(response);
    }catch(e) {
      errorObj = response;
    }
  };

  throw {
    "errorCode": "Invocation_Error",
    "errorDetail": errorObj
  };
};
