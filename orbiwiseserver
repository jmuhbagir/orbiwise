var configScript = require("./config");
var clientModule = require("./client");

/**
 * Simple wrapper of the Orbiwise server's API
 * @class OrbiwiseServer
 * @constructor
 * @param {Object} config: configuration object, optional, defaults to the config script
 */
function OrbiwiseServer(config) {

    this.config = {};
    if (config) {

        for (var key in config) {
            this.config[key] = config[key];
        }

        if (!this.config.orbiwiseUrl) {
            this.config.orbiwiseUrl = configScript.orbiwiseUrl;
        }
    } else {
        this.config = configScript;
    }

    this.client = new clientModule.Client({username: this.config.username, password: this.config.password});
}

/**
 * Register a callback url to the Orbiwise server to receive updates sent by device
 * @function registerCallback
 * @param {Object} [callback] the configuration of the callback. If not defined, defaults to the callback variable in "/lib/orbiwise/config"
 * @param {String} [callback.host] e.g. "https://electronica.scriptrapps.io", 
 * @param {String} [callback.port], port number, optional
 * @param {String} [callback.path_prefix]: the path to the callback script
 * @param {String} [callback.auth_string]: optional, the authorization header, e.g. "Bearer YOUR_AUTH_TOKEN"
 * @param {Number} [callback.retry_policy]: 0 = no retry, 1 = retry. Optional. Defaults to 1
 * @return 
 * @throws {Error}
 */
OrbiwiseServer.prototype.registerCallback = function(callback) {

    callback = callback ? callback : this.config.callback; 
    if (!callback || !callback.host || !callback.path_prefix) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.registerCallback: callback.host and callback.path_prefix cannot be null or empty"
        };
    }

    var callbackClone = JSON.parse(JSON.stringify(callback));
    callbackClone.retry_policy = callbackClone.retry_policy ? callbackClone.retry_policy : 1;

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/pushmode/start",
        method: "PUT",
        bodyString: JSON.stringify(callbackClone)
    };

    return this.client.callApi(instruction);
};

/**
 * Unregister callbacks from the Orbiwise server to stop receiving updates sent by devices
 * @function unregisterCallbacks
 * @return 
 * @throws {Error}
 */
OrbiwiseServer.prototype.unregisterCallbacks = function(callback) {

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/pushmode/stop",
        method: "PUT"
    };

    return this.client.callApi(instruction);
};

/**
 * @function getLatestPayload
 * @param {String} target device deveui (id)
 * @return {Object} device payload
 */
OrbiwiseServer.prototype.getLatestPayload = function(deveui) {

    if (!deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.getLatestPayload: deveui cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + deveui + "/payloads/ul/latest",
        method: "GET"
    };

    return this.client.callApi(instruction);
};

/**
 * List all payloads of a given device
 * @function listPayloads
 * @param {String} target device deveui (id)
 * @return {Array} device payloads
 */
OrbiwiseServer.prototype.listPayloads = function(deveui) {

    if (!deveui) {

        throw {

            errorCode: "INVALID_PARAMETER",
            errorDetail: "OrbiwiseServer.listPayloads: deveui cannot be null or empty"
        };
    }

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes/" + deveui + "/payloads/ul",
        method: "GET"
    };

    return this.client.callApi(instruction);
};

/**
 * @function listNodes
 * @return {Array} list of nodes
 */
OrbiwiseServer.prototype.listNodes = function() {

    var instruction = {

        url: this.config.orbiwiseUrl + "/rest/nodes",
        method: "GET"
    };

    return this.client.callApi(instruction);
};
